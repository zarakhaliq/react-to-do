{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","type","value","class","onChange","e","target","onClick","preventDefault","console","log","text","completed","id","Math","random","name","Todo","todo","filteredTodos","className","map","el","filter","TodoList","App","useState","status","setFilteredTodos","useEffect","filteredTodosHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.babf0bab.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = ({inputText, setInputText, todos, setTodos, setStatus}) => {\r\n  const inputTextHandler = e => {\r\n    //we are going to set the input text to our e.target.value which is the input text:\r\n    setInputText(e.target.value);\r\n  };\r\n  const todosHandler = e => {\r\n    e.preventDefault();\r\n    //We can setTodos using 'spread' so that any new todo is added and the previous ones are left.\r\n    console.log(inputText);\r\n    setTodos([\r\n      ...todos,\r\n      {\r\n        text: inputText,\r\n        completed: false,\r\n        id: Math.random() * 100,\r\n      },\r\n    ]);\r\n    setInputText(\"\");\r\n  };\r\n\r\n  const statusHandler = e => {\r\n    //console.log(e.target.value);\r\n    setStatus(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <input\r\n        type=\"text\"\r\n        value={inputText}\r\n        class=\"todo-input\"\r\n        onChange={inputTextHandler}\r\n      />\r\n      <button class=\"todo-button\" type=\"submit\" onClick={todosHandler}>\r\n        <i class=\"fas fa-plus-square\"></i>\r\n      </button>\r\n      <div class=\"select\">\r\n        <select name=\"todos\" class=\"filter-todo\" onChange={statusHandler}>\r\n          <option value=\"all\">All</option>\r\n          <option value=\"completed\">Completed</option>\r\n          <option value=\"incomplete\">Incomplete</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\nconst Todo = ({text, todos, setTodos, todo, filteredTodos}) => {\r\n  // console.log(todos);\r\n  const deleteHandler = () => {\r\n    console.log(todo);\r\n    ///Filter method returns an array of todos who's id do not match the id of the element user clicks on to delete.This will in essence give the\r\n    //todos list WITHOUT the todo the user clicked i.e. it deltes the element clicked.\r\n    setTodos(todos.filter(el => el.id !== todo.id));\r\n  };\r\n  const completeHandler = () => {\r\n    setTodos(\r\n      todos.map(el => {\r\n        if (el.id === todo.id) {\r\n          console.log(todo);\r\n          return {...el, completed: !el.completed};\r\n          console.log(todo);\r\n        }\r\n        return el;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo\">\r\n      <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>\r\n        {text}\r\n      </li>\r\n      <button className=\"completeBtn\" onClick={completeHandler}>\r\n        <i className=\"fas fa-check\"></i>\r\n      </button>\r\n      <button className=\"trashBtn\" onClick={deleteHandler}>\r\n        <i className=\"fas fa-trash\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nconst TodoList = ({todos, setTodos, filteredTodos}) => {\r\n  console.log(todos);\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <ul className=\"todo-list\">\r\n        {filteredTodos.map(todo => (\r\n          <Todo\r\n            todos={todos}\r\n            setTodos={setTodos}\r\n            text={todo.text}\r\n            completed={todo.completed}\r\n            key={todo.id}\r\n            todo={todo}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, {useState, useEffect} from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  //inputText is the value of the input which is a blank string when you load the page.\n  //setInputTextValue is a function that changes the inputText value.\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  //useEffect: useEFFECT runs the first time you load the page and everytime a state (useState) in the array changes\n  //useEffect(() => {\n  //getLocalTodos();\n  //}, []);\n  useEffect(() => {\n    filteredTodosHandler();\n    //saveLocalTodos();\n  }, [todos, status]);\n\n  //Functions\n\n  const filteredTodosHandler = () => {\n    switch (status) {\n      case \"completed\":\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case \"incomplete\":\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Personal Todo List</h1>\n      </header>\n      <div className=\"formSection\">\n        <Form\n          inputText={inputText}\n          setInputText={setInputText}\n          todos={todos}\n          setTodos={setTodos}\n          setStatus={setStatus}\n        />\n        <TodoList\n          setTodos={setTodos}\n          todos={todos}\n          filteredTodos={filteredTodos}\n        />\n        <div></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}